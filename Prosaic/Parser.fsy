%{

open Ast

%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token <string> ID
%token <System.Int32> INT32
%token <System.Double> FLOAT
%token PLUS MINUS ASTER	SLASH
%token LPAREN RPAREN
%token BOOLEAN PREDTRUE PREDFALSE
%token EOF SEMI
%token NOT AND OR IFF IMPLIES FORALL EXISTS
// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type <prog> start

%%

start: Prog { $1 }

Prog: EqnList { Prog (List.rev $1) }

Formula:
	| ID { Atom $1 }
	| PREDTRUE { B true }
	| PREDFALSE { B false }
	| NOT Formula { Not $2 }
	| Formula AND Formula { And ($1, $3) }
	| Formula OR Formula { Or ($1, $3) }
	| Formula IMPLIES Formula { Imp ($1, $3) }
	| Formula IFF Formula { Iff ($1, $3) }
	| ID FORALL Formula { ForAll ($1, $3) }
	| ID EXISTS Formula { Exists ($1, $3) }
	| LPAREN Formula RPAREN { $2 }

EqnList:
	| Formula { [$1] }
	| EqnList SEMI Formula { $3 :: $1 }


